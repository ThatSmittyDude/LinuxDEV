
RISC-V Architecture
UC Berkely

	-Currently supports 32-bit, 64-bit, and 128-bit implimentations
	-33 registers inlcuding $pc, 32 general use regiters
		-x0 to x31 general purpose, + pc register
	
	-Registers are given seperated identifiers based on use in the RISC-V calling convention
		-x0 = zero
		-x1 = ra
		-6 special puropose registers 
		-7 temporary registers t0-t6
		-12 saved regiters s0-s11
		-8 argument regiters a0-a7

Structure 
	-Three register instruction structure like ARM
		<operation>	<destination>,<source1>,<source2>
		addi	a2,x0,64
		$a2 = $zero + 64
		$a2 = 64

	la	a1,helloworld
		a1 = address of hello world label

RISC-V syscall table
	-To do anything meaningfull, ask the kernel for help

	-linux syscall table defines how to interact with the kerenel
		-specifies functions, syscall numbers, arguments required, etc
	-for todays episode we need syscall 93 for exit and syscall 64 for write

	-To implement a syscall 
		-set a7 to the syscall number 
		-set a0 to the arguements for that syscall
		-invoke the ecall instruction to call the kernel
